15.1 the hidden this pointer and member function chanining
- The answer is that C++ utilizes a hidden pointer named this! In this lesson, we’ll take a look at this in more detail.
- We use -> to select a member from a pointer to an object. this->m_id is the equivalent of (*this).m_id.
- simple.setID(2);   --> Simple::setID(&simple, 2); 
- All non-static member functions have a this const pointer that holds the address of the implicit object.
- it can sometimes be useful to have member function retur the implicit object as a return value. The primary reason
   to do this is to allow member function to be chained together. so several  member funcitons can be called "function chaining"
- ressting a class back to default state
- this and const objects. for non cosnt member functions, this is a const pointer to a non const value. With const member functions, this is a const pointer 
  to const value

15.2 Classes and header files
- Most often, classes are defined in header files of the same name as the class
- Prefer to put your class definitions in a header file with the same name as the class. Trivial member functions 
  (such as access functions, constructors with empty bodies, etc…) can be defined inside the class definition.
- Prefer to define non-trivial member functions in a source file with the same name as the class.
- Member functions defined inside the class definition are implicitly inline. 
  Inline functions are exempt from the one definition per program part of the one-definition rule.
- Functions defined inside the class definition are implicitly inline, which allows them to be #included into multiple code files without violating the ODR.
- Put any default arguments for member functions inside the class definition.

15.3 Nested Types (member types)
- so far we have seen, that class types with two different kinds of members: data members and member funcitons
- class types another kind of member: nested types ( also called member types). 
- Define any nested types at the top of your class type.
- Class types can also contain nested typedefs or type aliases

15.4 Introduction to destructors
- Destructor are designed to allow a class to do any necessary clean up before an object of the class is destroyed
- A warming about the std::exit() function, which can be used to terminatyour immediately. When the program is terminated 
  immediately, the program just ends. Local variables are not destroyed first no destructoeds will be called. 
- Unhandled exceptions will also cause the program to terminate, 

15.6 class templates with member functions
- Member variables of a class can be made static by using the static keyword. 
  Unlike normal member variables, static member variables are shared by all objects of the class. 
  Consider the following program, similar to the above
- Static members are global variables that live inside the scope region of the class.
- Access static members using the class name and the scope resolution operator (::).
- Defining and initializing static member variables
- Note that this static member definition is not subject to access controls: you can define and initialize the value even if it’s declared as private 
- Initialization of static member variables inside the class definition
- Make your static members inline or constexpr so they can be initialized inside the class definition.
- Only static members may use type deduction (auto and CTAD)

15.7 Static Member functions
- Member variables aren’t the only type of member that can be made static. 
  Member functions can be made static as well. Here is the above example with a static member function accessor
- In general, a static class is preferable when you have static data members and/or need access controls. Otherwise, prefer a namespace.
- C++ does not support static constructors

15.8 Friend non member functions
- inside the body of a class, a friend declaration (using the keyword) can be used to tell the compiler that some other 
  class or functions is now a friend. 
- Friendship is always granted by the class whose members will be accessed (not by the class or function desiring access). 
  Between access controls and granting friendship, 
  a class always retains the ability to control who can access its members.
- A friend function should prefer to use the class interface over direct access whenever possible.
- Prefer to implement a function as a non-friend when possible and reasonable.

15.9 Friend classes and friend member functions
- A friend class is a class that can access the private and protected members of another class

15.10 Ref qualifiers
- 
















