7.1 Compound Statemets(block)
- The nesting level (also called the nesting depth) of a function is the maximum number of nested blocks you can be inside at any point in the function
- Keep the nesting level of your functions to 3 or less. If your function has a need for more nested levels, consider refactoring your function into sub-functions.

7.2 user defined namespaces and the scope resolution operator
- Note that this error happens at the point of redefinition, so it doesn’t matter whether function doSomething is ever called.
- C++ allows us to define our own namespaces via the namespace keyword. Namespaces that you create in your own programs are casually called user-defined namespaces
- We recommend starting namespace names with a capital letter. However, either style should be seen as acceptable.
- There are two different ways to tell the compiler which version of doSomething() to use, via the scope resolution operator, 
  or via using statements (which we’ll discuss in a later lesson in this chapter).
- The scope resolution operator can also be used in front of an identifier without providing a namespace name 
  (e.g. ::doSomething). In such a case, the identifier (e.g. doSomething) is looked for in the global namespace.
- If an identifier inside a namespace is used and no scope resolution is provided, the compiler will first try to find a matching declaration in that same namespace
- Multiple namespace blocks are allowed
- Do not add custom functionality to the std namespace.
- Since C++17, nested namespaces can also be declared this way: namespace Foo::Goo{}
- Because typing the qualified name of a variable or function inside a nested namespace can be painful, C++ allows you to create namespace aliases
   namespace Active = Foo::Goo
-The examples in these tutorials will typically not be namespaced unless we are illustrating something specific about namespaces, to help keep the examples concise.

7.3 Local variables
- A identifierscope determines where an identifier can be acesed within the source code.
- When an identifier can be accessed we say it is in scope if not out of scope
- Local variables have block scope, which means they are in scope from their point of definition to the end of the block they are defined within.
- Variable names must be unique within a given scope, otherwise any reference to the name will be ambiguous. Consider the following program:
- Local variables can be defined inside nested blocks. This works identically to local variables in function body blocks:
- local variables have no linkage. 
- Scope and linkage may seem somewhat similar. However, scope determines where declaration of a single identifier can be seen and used in the code. 
- Linkage determines whether multiple declarations of the same identifier refer to the same object or not.
- If a variable is only used within a nested block, it should be defined inside that nested block:
- Define variables in the most limited existing scope. Avoid creating new blocks whose only purpose is to limit the scope of variables.

7.4 Introduction to global variables
- identifiers declared in the global namespace have global namescope (commonly called global scope), and sometimes informally called file scope
- Variables declared inside a namespace are also global variables.
- Prefer defining global variables inside a namespace rather than in the global namespace. ************
- global variables are created when the program starts (before main() begins execution), and destroyed when it ends. this is called static duration. 
  variable with static duration are called static variable
- use "g" and "g_" prefic for when naming global variables
- to help differentiate them form local variables and function parameters
- Unlike local variables, which are uninitialized by default, variables with static duration are zero-initialized by default.
- Just like local variables, global variables can be constant. As with all constants, constant global variables must be initialized.

7.5 variable shadowing (name hiding)
- similar to how variables in a nested block can shadow variables in an outer block, local variables with the name as 
  global variable will shadow the global variable wherever the local variable is in scope.
- However, because global variables are part of the global namespace, we can use the scope operator (::) with no prefix to tell the compiler we mean the global variable
- Avoid variable shadowing.

7.6 internal linkage
- An identifiers linkage determines whether other declarations of that name refer to the same object or not.
- Global variable and functions identifiers canhav either internal linkage and external linkage
- An identifier with internal linkage can be see and used with in a single translation unit, but it not accessible from other translation units.
- identifiers with internal linkage may not be visible to the linker at all. Alternatively, they may be visible to the linker, but marked for use in a specific translation unit.
- Global variables with internal linkage are sometimes called internal variables.To make a non-constant global variable internal, we use the static keyword.
- Const and constexpr global variables have internal linkage by default (and thus don’t need the static keyword -- if it is used, it will be ignored).
- The use of the static keyword above is an example of a storage class specifier, which sets both the name’s linkage and its storage duration. 
   The most commonly used storage class specifiers are static, extern, and mutable
- mutable allows modification of class members even in const objects.
- As noted above, function identifiers also have linkage. Functions default to external linkage 
  (which we’ll cover in the next lesson), but can be set to internal linkage via the static keyword:
- why bother giving identifiers intenal linkage?
 1) There is an identifier we want to make sure isn’t accessible to other files. This could be a global variable we don’t want messed with, or a helper function we don’t want called.
 2) To be pedantic about avoiding naming collisions. Because identifiers with internal linkage aren’t exposed to the linker, they can only collide with names in the same translation unit, not across the entire program.
- Give identifiers internal linkage when you have an explicit reason to disallow access from other files.
- Consider giving all identifiers you don’t want accessible to other files internal linkage (use an unnamed namespace for this).

7.7 External linkage and variable forward declarations
- An identifier with external linkage can be seen and used both from the file in which it is defined, and from other code files (via a forward declaration). 
  In this sense, identifiers with external linkage are truly “global” in that they can be used anywhere in your program!
- Function have external linkage by default
- The forward declaration tells the compiler about the existence of the function, and the linker connects the function calls to the actual function definition.
- Global variables with external linkage are called external variables. To make a global variable external(), we can use the extern keyword.
- To actually use an external global variable that has been defined in another file, you also must place a forward declaration for the global 
  variable in any other files wishing to use the variable. For variables, 
  creating a forward declaration is also done via the extern keyword (with no initialization value).
- n some contexts, extern means “give this variable external linkage”. In other contexts, extern means 
  “this is a forward declaration for an external variable that is defined somewhere else”. 

7.8 why (non const)global vairables are evil
- not all global vairables are bad. but, mostly talking about non const global Variables
- A function that utilizes nothing but its parameters and has no side effects is perfectly modular.
- Use local variables instead of global variables whenever possible.
- Initialization of static variables (which includes global variables) happens as part of program startup, before execution of the main function. This proceeds in two phases.
  1) The first phase is called static initialization. In the static initialization phase, 
  global variables with constexpr initializers (including literals) are initialized to those values. 
  Also, global variables without initializers are zero-initialized.
  2) The second phase is called dynamic initialization. 
    This phase is more complex and nuanced, but the gist of it is that global variables with non-constexpr initializers are initialized.
- The ambiguity in the order that objects with static storage duration in different translation units are initialized is often called the static initialization order fiasco.
- As a rule of thumb, any use of a global variable should meet at least the following two criteria: There should only ever be one of the thing the variable represents in your program, 
 and its use should be ubiquitous throughout your program.
- First, prefix all non-namespaced global variables with “g” or “g_”, or better yet, put them in a namespace

7.9 sharing global constants across multiple files (using inline variables)
- we can declare these in header file and include it whenever is necessary
- Downside: Changing a single constant value would require recompiling every file that includes the constants header, which can lead to lengthy rebuild times for larger projects.
- One way to avoid these problems is by turning these constants into external variables, since we can then have a single variable (initialized once) that is shared across all files.
- In order for variables to be usable in compile-time contexts, such as array sizes, the compiler has to see the variable’s definition (not just a forward declaration).
- Thus outside of constants.cpp, these variables can’t be used anywhere that requires a compile-time constant. 
  Second, because compile-time constants can typically be optimized more than runtime constants, the compiler may not be able to optimize these as much.
- Global constants as inline variables C++17
  1) by making our constexpr varibles inline, we can define them in a header file and then #inlcude them into any .cpp file that requires them.
  2) Constexpr functions are implicitly inline, but constexpr variables are not implicitly inline. If you want an inline constexpr variable, you must explicitly mark it as inline.

- If you need global constants and your compiler is C++17 capable, prefer defining inline constexpr global variables in a header file. *********************

7.10 static local variables
- The term static is one of the most confusing terms in the C++ language, in large part because static has different meanings in different contexts.
- We covered that global variables have static duratiion which means they are created when the program starts and destroyed when the program ends.
- We also dicussed how the static keyword gives a global indetifier(default have external linkage) internal linkage. which means the indetifier can only be used in'
same file in which it is defined
- static keyword when appplied to local variable
- using the static keyword on a local variable changes its duration automatic duration to static duration
- Initialize your static local variables. Static local variables are only initialized the first time the code is executed, not on subsequent calls.
- Because they have static duration, static local variables that are not explicitly initialized will be zero-initialized by default.
- Initialize your static local variables. Static local variables are only initialized the first time the code is executed, not on subsequent calls.
- A static local variable has block scope like a local variable, but its lifetime is until the end of the program like a global variable.
- Static local variables can be used when a function needs a persistent object that is not directly accessible outside of the function.
- Static local variables are best used to avoid expensive local object initialization each time a function is called.
- Static local variables should only be used if in your entire program and in the foreseeable future of your program, the variable is unique and it wouldn’t make sense to reset the variable.
- Best practice Const static local variables are generally okay to use.
- Non-const static local variables should generally be avoided. If you do use them, ensure the variable never needs to be reset, and isn’t used to alter program flow.

7.12 using declarations and using directives
- Fast forward to today -- if you’re using the standard library a lot, typing std:: 
  before everything you use from the standard library can become repetitive, and in some cases, can make your code harder to read.
  C++ provides some solutions to both of these problems, in the form of using-statements.
- Qualified and unqualified names, A name can be either qualified and unqualified
  1) A qualified name is a name that includes an associated scope.Most often, names are qualified with a namespace using the scope resolution or class name or object
  2) An unqualified name is a name that does not include a scoping qualifier. 
- using -declarations
  1) one way to reduce the repetition of typing std:: over and over is to utilize a using declaration statement. A using declaration allows us to use an unqualified
    name(with no scope) as an alias for a qualified name.
  2) The using-declaration is active from the point of declaration to the end of the scope in which it is declared.
- using direcrives
  1) another way to simplify things is to use a using directive. A using directive allows all identifiers in a given namespace to be referenced without qualification
    from the scope of the using directive.
-  In selecting a function from a set of potentially matching functions, it will prefer a function that 
   requires no argument conversions over a function that requires argument conversions. 
- Avoid using-directives (particularly using namespace std;) altogether, except in specific circumstances (such as using namespace std::literals to access the s and sv literal suffixes).
   Using-declarations are generally considered safe to use inside functions. Avoid using them in namespaces, especially the global namespace of a header file.
- Prefer explicit namespace qualifiers over using-statements. 
  Avoid using-directives altogether (except using namespace std::literals). Using-declarations are okay to use in .cpp files, after the #includes.
- The using keyword is also used to define type aliases, which are unrelated to using-statements. We cover type aliases in lesson 10.7 

7.13 unnamed namespace
- This might make unnamed namespaces seem useless. But the other effect of unnamed namespaces is that all identifiers inside an unnamed namespace are treated as if they have internal linkage, 
   which means that the content of an unnamed namespace can’t be seen outside of the file in which the unnamed namespace is defined.
- For functions, this is effectively the same as defining all functions in the unnamed namespace as static functions
- If you’re hardcore, you can take the opposite approach -- put all content that isn’t explicitly meant to be exported/external in an unnamed namespace.
- Prefer unnamed namespaces when you have content you want to keep local to a translation unit. Avoid unnamed namespaces in header files.
- An alternative is to use an inline namespace. An inline namespace is a namespace that is typically used to version content.
  Much like an unnamed namespace, anything declared inside an inline namespace is considered part of the parent namespace. 
  However, unlike unnamed namespaces, inline namespaces don’t affect linkage.
- 
























 









