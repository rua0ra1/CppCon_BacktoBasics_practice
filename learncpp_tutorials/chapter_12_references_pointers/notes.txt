12.1 introduction to compound data types
- Fortunately, C++ supports a second set of data types called compound data types. Compound data types are data types that can be constructed from fundamental 
  data types.
- the type of this function is void(int,double). Note that this type is composed of fundamental types, making it a compound type. of course, functions also have their own special 
behaviours as well (being callable)

12.2 Value categories (lvalues and rvalues)
- we defined an expression as “a combination of literals, variables, operators, and function calls that can be executed to produce a singular value”.
- Besides producing values and side effects, expressions can do one more thing: they can evaluate to objects or functions. We’ll explore this point further in just a moment.
- The type of an expression is equivalent to the type of the value, object, or function that results from the evaluated expression
- Note that the type of an expression must be determine at compile time (otherwise type checking and type deduction wouldn't work)
- The value category of an expression indicates whether an expression resolves to a value, a function, or an object of some kind
- prior to c++ 11 lvlaue and rvalue, after C++11 gvalue, prvalue, xvalues to support the move semantics
- lvalue and rvalue expressions
  1) an value is an expression that evaluates to an identifiable object or function (or bit field)
  2) An entity that has an identity can be differentiated from other similar entitites (typically by comparing the address of the entity)
  3) Entites with identities can be accessed via an identifier, reference, or pointer, and typically have  a lifetime longer than a single expression or statement
  4) since the introduction of constants into the language, lvalue come in two subtypes: a modifiable lvalue and non modifiable lvalue
  5) Rvalue is an expressiont hat is not lvalue. Rvalue expressions evalutate to a value.
  6) rvalues literals ( except c style string which are lvalue ), because style are strings are evulated to const char *. no move semantics apply for arrays
  7) rvalues return value of functions and operators that return by Value
- Lvalue expressions evaluate to an identifiable object.Rvalue expressions evaluate to a value.
- A full list of lvalue and rvalue expressions can be found here. In C++11, rvalues are broken into two subtypes: prvalues and xvalues, 
  so the rvalues we’re talking about here are the sum of both of those categories.
- A C-style string literal is an lvalue because C-style strings (which are C-style arrays) decay to a pointer. 
  The decay process only works if the array is an lvalue (and thus has an address that can be stored in the pointer). C++ inherited this for backwards compatibility
- The answer is that lvalue expressions will implicitly convert to rvalue expressions in contexts where an rvalue is expected but an lvalue is provided.
- A rule of thumb to identify lvalue and rvalue expressions:
  1) Lvalue expressions are those that evaluate to functions or identifiable objects (including variables) that persist beyond the end of the expression.
  2) Rvalue expressions are those that evaluate to values, including literals and temporary objects that do not persist beyond the end of the expression.

12.3 Lvalue references
- A reference is an alias for an exisitng object. once a reference has been defined, any operation ont he reference is applied to the object being referenced.
- A reference is essentially identical to the object being referenced.
- we can also create references to functions, though this is done less often
- c++ two type of references lvalue reference and rvalue references
- A lvalue reference just called a reference since prior to c++11 there was only one type of reference acts as an alias of an existing Lvalue
- When defining a reference, place the ampersand next to the type (not the reference variable’s name).
- For those of you already familiar with pointers, the ampersand in this context does not mean “address of”, it means “lvalue reference to”.
- Reference intitializaiton 
- When a reference is initialized with an object (or function), we say it is bound to that object (or function). 
  The process by which such a reference is bound is called reference binding. The object (or function) being referenced is sometimes called the referent.
- Lvalue references must be bound to a modifiable lvalue.
- References can’t be reseated (changed to refer to another object)
- Reference and refernt have idependent lifetimes
  1) A reference can be destroyed before the object it is referencing
  2) the object being referenced can be destroyed before the reference
- When ref dies, variable x carries on as normal, blissfully unaware that a reference to it has been destroyed.
- When an object being referenced is destroyed before a reference to it, the reference is left referencing an object that no longer exists. 
  Such a reference is called a dangling reference. Accessing a dangling reference leads to undefined behavior.

12.4 Lvalue references to const
- We discussed how an lvalue reference can only bind to a modifiable lvalue. 
- This is disallowed because it would allow us to modify a const variable (x) through the non-const reference (ref).
- By using the const keyword when declaring an lvalue reference, we tell an lvalue reference to treat the object it is referencing as const. 
 Such a reference is called an lvalue reference to a const value (sometimes called a reference to const or a const reference).
- Favor lvalue references to const over lvalue references to non-const unless you need to modify the object being referenced. *******************
- When this happens, a temporary object is created and initialized with the rvalue, and the reference to const is bound to that temporary object.
- If you try to bind a const lvalue reference to a value of a different type, 
  the compiler will create a temporary object of the same type as the reference, initialize it using the value, and then bind the reference to the temporary.
- Const references bound to temporary objects extend the lifetime of the temporary object
- Lvalue references can only bind to modifiable lvalues.
- Lvalue references to const can bind to modifiable lvalues, non-modifiable lvalues, and rvalues. This makes them a much more flexible type of reference.
- Lifetime extension only works when a const reference is directly bound to a temporary. Temporaries returned from a function (even ones returned by const reference) are not
  eligible for lifetime extensions
- Constexpr lvalue references (optional)
  1) When applied to a reference, constexpr allows the reference to be used in constant expression.
  2) constexpr reference cannot bind to a local variable. This is because the address the local variables is not known until the funciton they are defined within is actually called


  12.5 pass by lvalue reference
-  some objects are expensive to copy. most of the types provided by the standard library (such as std::string) are class types. 
-  wheever possible, we want to avoid making unnecessary copies that are expensive to copy, especially when we will destroy those copies almost immediately
- Pass by reference allows us to pass arguments to a function without making copies of those arguments each time the function is called.
- Passing values by reference to non-const allows us to write functions that modify the value of arguments passed in.
- Favor passing by const reference over passing by non-const reference unless you have a specific reason to do otherwise (e.g. the function needs to change the value of an argument).
- As a rule of thumb, pass fundamental types by value, and class (or struct) types by const reference.
  Other common types to pass by value: enumerated types and std::string_view.
  Other common types to pass by (const) reference: std::string, std::array, and std::vector.
- Prefer pass by value for objects that are cheap to copy, and pass by const reference for objects that are expensive to copy. 
  If you’re not sure whether an object is cheap or expensive to copy, favor pass by const reference.
- Prefer passing strings using std::string_view (by value) instead of const std::string&, 
  unless your function calls other functions that require C-style strings or std::string parameters.

12.7 introduction to pointers
- When declaring a pointer type, place the asterisk next to the type name.
- Like normal variables, pointers are not initialized by default. A pointer that has not been initialized is sometimes called a wild pointer. 
-  integer pointer it literally means pointer to the integer
- Thus, pointers and references both provide a way to indirectly access another object. The primary difference is that with pointers, we need to explicitly get the address to point at, 
  and we have to explicitly dereference the pointer to get the value. With references, the address-of and dereference happens implicitly.
- References can not be reseated (changed to reference something else), pointers can change what they are pointing at.
- Much like a dangling reference, a dangling pointer is a pointer that is holding the address of an object that is no longer valid (e.g. because it has been destroyed).

12.8 Null pointers
- Besides a memory address, there is one additional value that a pointer can hold: a null value. A null value (often shortened to null) is a special value that means something has no value. 
  When a pointer is holding a null value, it means the pointer is not pointing at anything. Such a pointer is called a null pointer.
- Value initialize your pointers (to be null pointers) if you are not initializing them with the address of a valid object.
- Use nullptr when you need a null pointer literal for initialization, assignment, or passing a null pointer to a function.
- Dereferencing a null pointer results in undefined behavior
- Conditionals can only be used to differentiate null pointers from non-null pointers. There is no convenient way to determine whether a non-null pointer is pointing to a valid object or dangling (pointing to an invalid object).
- A pointer should either hold the address of a valid object, or be set to nullptr. That way we only need to test pointers for null, and can assume any non-null pointer is valid.
- Favor references over pointers whenever possible
- Favor references over pointers unless the additional capabilities provided by pointers are needed.

12.9 Pointers and const
- A pointer to const value is a pointer that points to a constant value
-  pointer to const value , const pointer and const pointer to const value

12.10
- Pass by address does not make a copy of the object being pointed to
- Thus, just like pass by reference, pass by address is fast, and avoids making a copy of the argument object.
- In most cases, it is more effective to do the opposite: test whether the function parameter is null as a precondition
   (9.6 -- Assert and static_assert) and handle the negative case immediately
- Pass by const reference has a few other advantages over pass by address.
- First, because an object being passed by address must have an address, only lvalues can be passed by address 
  (as rvalues don’t have addresses). Pass by const reference is more flexible, as it can accept lvalues and rvalues
- Prefer pass by reference to pass by address unless you have a specific reason to use pass by address. *********************

12.11 Pass by address
- Pass by address for “optional” arguments
- Changing what a pointer parameter points at. it can be done by pass by address by reference
- using reference to a pointer

12.12 Return by refernce and return by address
- return by reference
- return by referrence returns a refrence that is bound to the object returned, which avoids making a copy of the return value.
- To return by reference, we simply define the return value of the function to be a reference type
- the object beign returned by reference must exit after the function returns
- Reference lifetime extension does not work across function boundaries.
- Don’t return non-const static local variables by reference
- Avoid returning references to non-const local static variables.
- If a function returns a reference, and that reference is used to initialize or assign to a non-reference variable, 
  the return value will be copied (as if it had been returned by value).
- It’s okay to return reference parameters by reference
- It’s okay to return by const reference an rvalue passed by const reference
- Prefer return by reference over return by address unless the ability to return “no object” (using nullptr) is important.


















  















