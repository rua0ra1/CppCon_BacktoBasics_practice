8.1,8.2, 8.3 Control flow introducton
- the specific sequence of statements that the cpu executes is called the program's execution path.
- when a control flow statement causes point of execution to change to a non sequential statement, this is called branching.
- Consider putting single statements associated with an if or else in blocks (particularly while you are learning). 
- The above program introduces a source of potential ambiguity called a dangling else problem
- null statement is an expression statement that consists of just semi colon.
- Be careful not to “terminate” your if statement with a semicolon, otherwise your conditional statement(s) will execute unconditionally 

8.4 constexpr if statements
- normally the conditional of an if statement is evaluated at runtime.
- C++ 17 , constexpr introduces the constrexpr if statement which requires the conditonal to be constant expression,
the conditonal of a constexpr if staemnt will be evaluated at complie time.
- Favor constexpr if statements over non-constexpr if statements when the conditional is a constant expression.

8.5 switch statement basics
- we can use manyelse statement but the if else condition will be evalued n times depending on the input (which is very inefficient),
  and the reader has to be sure that it is x being evaluated each time (not some other variable).
- testing a variable or expression for equality against a set of different values is common, 
  C++ provides an alternative conditional statement called a switch statement that is specialized for this purpose
- Compared to the original if statement, the switch statement has the advantage of only evaluating the expression once (making it more efficient), 
  and the switch statement also makes it clearer to the reader that it is the same expression being tested for equality in each case.
- Prefer switch statements over if-else chains when there is a choice.
- The one restriction is that the condition must evaluate to an integral
-  Historically, the most common way for compilers to implement switch statements is via Jump tables -- and jump tables only work with integral values.
- Place the default case last in the switch block.
- In the above examples, we used return statements to stop execution of the statements after our labels. However, this also exits the entire function.
- A break statement (declared using the break keyword) tells the compiler that we are done executing statements within the switch, and that 
  execution should continue with the statement 
  after the end of the switch block. This allows us to exit a switch statement without exiting the entire function.
- Each set of statements underneath a label should end in a break statement or a return statement. 
  This includes the statements underneath the last label in the switch.
- Prefer not to indent labels. This allows them to stand out from the surrounding code without implying that they are defining a nested scope region.


8.6 switch fallthough and scoping
- Execution will then continue sequently until one of the following termination conditions happen
   1) The end of the switch block is required
   2) Another control flow statement (typically a break or return) causes the switch block or function to exit.
   3) Something else interrupts the normal flow of the program (e.g. the OS shuts the program down, the universe implodes, etc…)
- To help address this, C++17 adds a new attribute called [[fallthrough]]. to explicitly tell the other it is intended
- Use the [[fallthrough]] attribute (along with a null statement) to indicate intentional fallthrough.
- The first statement after all of the case statements in the above program is return true, so if any case labels match, the function will return true.
- With if statements, you can only have a single statement after the if-condition, and that statement is considered to be implicitly inside a block:
- You can declare or define (but not initialize) variables inside the switch, both before and after the case labels:
- If defining variables used in a case statement, do so in a block inside the case.

8.7 Goto statements
- In C++, unconditional jumps are implemented via a goto statement, and the spot to is identified through use of statement label. 
  Just like switch case labels, statement labels are conventionally not indented
- statement labels have function scope. function scope, which means label is visible throughout the function even before its point of declaration.
  the goto statement and its corresponding statement label must appear in the same function.
- This creates what is not-so-affectionately known as spaghetti code. Spaghetti code is code that has a path of execution that resembles a bowl of spaghetti 
- avoid goto statements
- Avoid goto statements (unless the alternatives are significantly worse for code readability).

8.8 Introduction to loops and while statements
- A while statement is declared using the while keyword. When a while-statement is executed, 
  the expression condition is evaluated. If the condition evaluates to true, the associated statement executes.
- The only way to exit an infinite loop is through a return-statement, a break-statement, an exit-statement, a goto-statement, an exception being thrown, or the user killing the program
- Favor while(true) for intentional infinite loops.
- The use of i, j, and k for loop variable names arose because these are the first three shortest names for integral variables in the Fortran programming language
- The most common type of loop variable is called a counter, which is a loop variable that counts how many times a loop has executed. 
  In the examples above, the variable count is a counter.
- Integral loop variables should generally be a signed integral type.
- Often, we want to do something every 2nd, 3rd, or 4th iteration, such as print a newline. This can easily be done by using the remainder operator on our counter:
- 








