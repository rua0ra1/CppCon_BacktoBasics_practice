13.1 Introduction to user defined types
- C++ has two different categories of compound types that can be used to create program-define types
  1) Enumerated types ( includigng unscoped and scoped enumerations)
  2) class types (including structs, classes and unions)
- Don’t forget to end your type definitions with a semicolon.
- Name your program-defined types starting with a capital letter and do not use a suffix.
- A program-defined type used in only one code file should be defined in that code file as close to the first point of use as possible.
- A program-defined type used in multiple code files should be defined in a header file with the same name as 
  the program-defined type and then #included into each code file as needed.
- type definitions are partially exempt from the one definiton rule (ODR)
- Fundamental, Compound, user defined, program defined


13.2 Unscoped enumeration
- An enumeration (also called an enumerated type or an enum) is a compound data type whose values are 
  restricted to a set of named symbolic constants (called enumerators).
- each enumeration needs to be fully defined before we can use it (a forward declaration is not sufficient).
- Memory is allocated for each of these objects. Note that the initializer for an enumerated type must be one of the defined enumerators for that type.
- An enumeration or enumerated type is the program-defined type itself (e.g. Color).
- An enumerator is a specific named value belonging to the enumeration (e.g. red).
- Name your enumerated types starting with a capital letter. Name your enumerators starting with a lower case letter.
- f you’re wondering how we can use an enumerator where an integral value is expected, unscoped enumerators will implicitly convert to integral values. 
- Unscoped enumerations are named such because they put their enumerator names into the same scope as the 
  enumeration definition itself (as opposed to creating a new scope region like a namespace does).
- Prefer putting your enumerations inside a named scope region (such as a namespace or class) so the enumerators don’t pollute the global namespace.

13.3 Unscoped enumerator integral conversions
- Avoid assigning explicit values to your enumerators unless you have a compelling reason to do so.
- Make the enumerator representing 0 the one that is the best default meaning for your enumeration. If no good default meaning exists, consider adding an “invalid” or “unknown” 
  enumerator that has value 0, so that state is explicitly documented and can be explicitly handled where appropriate.
- Unscoped enumerations will implicitly convert to integral values
- Enumerators have values that are of an integral type. But what integral type? The specific integral type used to represent the value of 
  enumerators is called the enumeration’s underlying type (or base).
- Specify the base type of an enumeration only when necessary.

13.4 converting an enumeration to and from a starting

13.5 Introduction of overloading the I/O operators

13.6 Scoped enumerations (enum classes)
- That solution is the scoped enumeration (often called an enum class in C++ for reasons that will become obvious shortly).
- it has two distinct features with unscoped enum, 
  1) they wont implicitly convert to intergers
  2) the enumerators are only placed into the scope region of the enumeration 
- To make a scoped enumeration, we use the keywords enum class
- The class keyword (along with the static keyword), is one of the most 
  overloaded keywords in the C++ language, and can have different meanings depending on context. Although scoped enumerations use the class keyword, they aren’t considered to be 
  a “class type” (which is reserved for structs, classes, and unions).
-  scoped enumerations place their enumerators only in the scope region of the enumeration. In other words, 
  scoped enumerations act like a namespace for their enumerators.
- Favor scoped enumerations over unscoped enumerations unless there’s a compelling reason to do otherwise.


13.7 Introduction to structs, members and member selection
- A struct (short for structure) is a program-defined data type (13.1 -- Introduction to program-defined (user-defined) types) that allows us to bundle multiple variables together into a single type. 
- In C++, a member is a variable, function, or type that belongs to a struct (or class). All members must be declared within the struct (or class) definition.
- . is selection operators

13.8 Struct aggregate initalization
- In general programming, an aggregate data type (also called an aggregate) is any type that can contain multiple data members. 
  Some types of aggregates allow members to have different types (e.g. structs), 
  while others require that all members must be of a single type (e.g. arrays).
- The key thing to understand at this point is that structs with only data members are aggregates.
- Aggregates use a form of initialization called aggregate initialization, which allows us to directly 
  initialize the members of aggregates. To do this, we provide an initializer list as an initializer, 
  which is just a braced list of comma-separated values.
- Prefer the (non-copy) braced list form when initializing aggregates.
- To help avoid this, C++20 adds a new way to initialize struct members called designated initializers. 
- When adding a new member to an aggregate, it’s safest to add it to the bottom of the definition list so the initializers for other members don’t shift.

13.9 Default member initialization
- Using default member initializers (or other mechanisms that we’ll cover later), structs and classes can self-initialize even when no explicit initializers are provided!
- Explicit initialization values take precedence over default values
- Provide a default value for all members. This ensures that your members will be initialized even if the variable definition doesn’t include an initializer list.
- For aggregates, prefer value initialization (with an empty braces initializer) to default initialization (with no braces).
  Fraction f1;          // f1.numerator value initialized to 0, f1.denominator defaulted to 1
  Fraction f2 {};       // f2.numerator value initialized to 0, f2.denominator defaulted to 1


13.10 passing and returning structs
- 








 






