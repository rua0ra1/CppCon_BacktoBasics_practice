4.1 introduction to fundamental data types
- variable is the name assigned to the piece of memory that can be used to stored.
- memory is organised into sequetial units called memory address(address)
- in modern computer, each bit doesnt have address where we dont have enough address. so we have address for a byte (8 bit).
byte sized chunk of data.
- datatype to tell the complier how to intrepret the contents of memory. basic types primitive types or builtin types.
- String is not builtin character, and string is sequence of character.


4.2 Void
- void means no type. An incomplete type is a type that has been declared not yet defined ( memory not allocated)
- the void keyword has a third (more advanced) use in C++  which is void pointer

4.3 object sizes and the sizeof operator
- use static_assert to have the complier fail a build if it is  complied on an architecture where the assumption is not true.
- sizeof uniary operator will type/variable return its size in bytes.

4.4 Signed integers
- An integer is an integral type. C++ has primary fundamental integer types available for use.
- bool and char types are considered to be intergral types (because these types stroe their values as ineger values)
-  short s;      // prefer "short" instead of "short int"
   int i;
   long l;       // prefer "long" instead of "long int"
   long long ll; // prefer "long long" instead of "long long int"
- signed keyword need not be used as intergers are signed by default.
- Prefer the shorthand types that do not use the int suffix or signed prefix.
- Set of specific values that a data type can hold its range. 
- if we try to assign value (outside of respective type range). if the result is not mathematically defined or not in the range of reprenentable 
values for its type, the behaviour is undefined.  it is called overflow **
- When doing division with two integers (called integer division), 
C++ always produces an integer result. Since integers can’t hold fractional values, any fractional portion is simply dropped (not rounded!).


4.5 unsigned integers, and why to avoid them
- unsigned short us; unsigned int ui;
- An n-bit unsigned variable has a range of 0 to (2n)-1.
- If an unsigned value is out of range, it is divided by one greater than the largest number of the type, and only the remainder kept.type simply “wraps around” 
- It’s possible to wrap around the other direction as well. 0 is representable in a 2-byte unsigned integer, so that’s fine.
- In C++, if a mathematical operation (e.g. arithmetic or comparison) has one signed integer and one unsigned integer, 
  the signed integer will usually be converted to an unsigned integer **
- Favor signed numbers over unsigned numbers for holding quantities (even quantities that should be non-negative) 
  and mathematical operations. Avoid mixing signed and unsigned numbers.

4.6 Fixed witdth integers and size_t
-  the integer variables will have a minimum size -- but they could be larger, depending on the target system.
- fixed width (stdint.h) that are gauranteed to be the same size on any architecture
- In c++ officially adopted these fixed widht integers as part of C++11. They can be accessed by including the <cstdint> header
- the fixed width inetegers have two downsides that are typically raised.
- Fast and least integers c++ also defines two alternative set of integers that are gauranteed to be defined.
- When storing integral values where a specific size is important, it’s generally best to avoid std::int8_t and std::uint8_t.use unit16 or int16 these two behave like a chars instead of integers.
- Our stance is that it’s better to be correct than fast, and better to fail at compile time than runtime
- Prefer std::int#_t when storing a quantity that needs a guaranteed range.
- Prefer std::uint#_t when doing bit manipulation or where well-defined wrap-around behavior is required.
- what is the size_t? std::size_t is an alias for an implementation-defined unsigned integral type. It is used within the standard library to represent the byte-size or length of objects.

4.7 Introduction to scientific notation
- significand * 10^(exponent)
- c++ use e or  E for exponent of base 10
- The digtis in the significand is called significant digits  and more siginificant are the more precise the value is

4.8 floating point numbers
- the floating part of the name floating point refers to the fact that the decimal point can float-
that is, it can support a variable number of digits before and after the decimal point
- Note that by default, floating point literals default to type double. An f suffix is used to denote a literal of type float.
- The precision of a floating point type defines how many significant digits it can represent without information loss.
- a float has 6 to 9 digits of precision. This means that a float can exactly represent any number with up to 6 significant digits. 
A number with 7 to 9 significant digits may or may not be represented exactly depending on the specific value. 
And a number with more than 9 digits of precision will definitely not be represented exactly.
- Favor double over float unless space is at a premium, as the lack of precision in a float will often lead to inaccuracies. ***
- We can override the default precision that std::cout shows by using an output manipulator function named std::setprecision(). in iomainip header 

4.9 Boolean values
 - bool b3 {}; // default initialize to false
 - boolean values actually stored in integers values 1 is true and 0 is false
 - std::boolalpha is the statement for cout to print actual true and false instead of 1 and 0

 4.10 Introduction to if statements
 - 





